{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Infecter = void 0;\n\nconst Utils_1 = require(\"../../../../Utils\");\n\nclass Infecter {\n  constructor(container) {\n    this.container = container;\n  }\n\n  isEnabled() {\n    return this.container.options.infection.enable;\n  }\n\n  reset() {}\n\n  interact(p1, delta) {\n    var _a, _b;\n\n    const infecter1 = p1.infecter;\n    infecter1.updateInfection(delta.value);\n\n    if (infecter1.infectionStage === undefined) {\n      return;\n    }\n\n    const container = this.container;\n    const options = container.options;\n    const infectionOptions = options.infection;\n\n    if (!infectionOptions.enable || infectionOptions.stages.length < 1) {\n      return;\n    }\n\n    const infectionStage1 = infectionOptions.stages[infecter1.infectionStage];\n    const pxRatio = container.retina.pixelRatio;\n    const radius = p1.size.value * 2 + infectionStage1.radius * pxRatio;\n    const pos = p1.getPosition();\n    const infectedStage1 = (_a = infectionStage1.infectedStage) !== null && _a !== void 0 ? _a : infecter1.infectionStage;\n    const query = container.particles.quadTree.query(new Utils_1.Circle(pos.x, pos.y, radius)).filter(p => p.infecter.infectionStage === undefined || p.infecter.infectionStage !== infecter1.infectionStage);\n    const infections = infectionStage1.rate;\n    const neighbors = query.length;\n\n    for (const p2 of query) {\n      const infecter2 = p2.infecter;\n\n      if (Math.random() < infections / neighbors) {\n        if (infecter2.infectionStage === undefined) {\n          infecter2.startInfection(infectedStage1);\n        } else if (infecter2.infectionStage < infecter1.infectionStage) {\n          infecter2.updateInfectionStage(infectedStage1);\n        } else if (infecter2.infectionStage > infecter1.infectionStage) {\n          const infectionStage2 = infectionOptions.stages[infecter2.infectionStage];\n          const infectedStage2 = (_b = infectionStage2 === null || infectionStage2 === void 0 ? void 0 : infectionStage2.infectedStage) !== null && _b !== void 0 ? _b : infecter2.infectionStage;\n          infecter1.updateInfectionStage(infectedStage2);\n        }\n      }\n    }\n  }\n\n}\n\nexports.Infecter = Infecter;","map":{"version":3,"names":["Object","defineProperty","exports","value","Infecter","Utils_1","require","constructor","container","isEnabled","options","infection","enable","reset","interact","p1","delta","_a","_b","infecter1","infecter","updateInfection","infectionStage","undefined","infectionOptions","stages","length","infectionStage1","pxRatio","retina","pixelRatio","radius","size","pos","getPosition","infectedStage1","infectedStage","query","particles","quadTree","Circle","x","y","filter","p","infections","rate","neighbors","p2","infecter2","Math","random","startInfection","updateInfectionStage","infectionStage2","infectedStage2"],"sources":["/Users/isaicastro/Desktop/Projects/Face-Recognition/node_modules/tsparticles/dist/Core/Particle/Interactions/Particles/Infecter.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Infecter = void 0;\nconst Utils_1 = require(\"../../../../Utils\");\nclass Infecter {\n    constructor(container) {\n        this.container = container;\n    }\n    isEnabled() {\n        return this.container.options.infection.enable;\n    }\n    reset() {\n    }\n    interact(p1, delta) {\n        var _a, _b;\n        const infecter1 = p1.infecter;\n        infecter1.updateInfection(delta.value);\n        if (infecter1.infectionStage === undefined) {\n            return;\n        }\n        const container = this.container;\n        const options = container.options;\n        const infectionOptions = options.infection;\n        if (!infectionOptions.enable || infectionOptions.stages.length < 1) {\n            return;\n        }\n        const infectionStage1 = infectionOptions.stages[infecter1.infectionStage];\n        const pxRatio = container.retina.pixelRatio;\n        const radius = p1.size.value * 2 + infectionStage1.radius * pxRatio;\n        const pos = p1.getPosition();\n        const infectedStage1 = (_a = infectionStage1.infectedStage) !== null && _a !== void 0 ? _a : infecter1.infectionStage;\n        const query = container.particles.quadTree\n            .query(new Utils_1.Circle(pos.x, pos.y, radius))\n            .filter((p) => p.infecter.infectionStage === undefined || p.infecter.infectionStage !== infecter1.infectionStage);\n        const infections = infectionStage1.rate;\n        const neighbors = query.length;\n        for (const p2 of query) {\n            const infecter2 = p2.infecter;\n            if (Math.random() < infections / neighbors) {\n                if (infecter2.infectionStage === undefined) {\n                    infecter2.startInfection(infectedStage1);\n                }\n                else if (infecter2.infectionStage < infecter1.infectionStage) {\n                    infecter2.updateInfectionStage(infectedStage1);\n                }\n                else if (infecter2.infectionStage > infecter1.infectionStage) {\n                    const infectionStage2 = infectionOptions.stages[infecter2.infectionStage];\n                    const infectedStage2 = (_b = infectionStage2 === null || infectionStage2 === void 0 ? void 0 : infectionStage2.infectedStage) !== null && _b !== void 0 ? _b : infecter2.infectionStage;\n                    infecter1.updateInfectionStage(infectedStage2);\n                }\n            }\n        }\n    }\n}\nexports.Infecter = Infecter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}