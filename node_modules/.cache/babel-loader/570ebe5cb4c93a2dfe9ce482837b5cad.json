{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Infecter = void 0;\n\nclass Infecter {\n  constructor(container, particle) {\n    this.container = container;\n    this.particle = particle;\n  }\n\n  startInfection(stage) {\n    const container = this.container;\n    const options = container.options;\n    const stages = options.infection.stages;\n    const stagesCount = stages.length;\n\n    if (stage > stagesCount || stage < 0) {\n      return;\n    }\n\n    this.infectionDelay = 0;\n    this.infectionDelayStage = stage;\n  }\n\n  updateInfectionStage(stage) {\n    const container = this.container;\n    const options = container.options;\n    const stagesCount = options.infection.stages.length;\n\n    if (stage > stagesCount || stage < 0 || this.infectionStage !== undefined && this.infectionStage > stage) {\n      return;\n    }\n\n    this.infectionStage = stage;\n    this.infectionTime = 0;\n  }\n\n  updateInfection(delta) {\n    const options = this.container.options;\n    const infection = options.infection;\n    const stages = options.infection.stages;\n    const stagesCount = stages.length;\n\n    if (this.infectionDelay !== undefined && this.infectionDelayStage !== undefined) {\n      const stage = this.infectionDelayStage;\n\n      if (stage > stagesCount || stage < 0) {\n        return;\n      }\n\n      if (this.infectionDelay > infection.delay * 1000) {\n        this.infectionStage = stage;\n        this.infectionTime = 0;\n        delete this.infectionDelay;\n        delete this.infectionDelayStage;\n      } else {\n        this.infectionDelay += delta;\n      }\n    } else {\n      delete this.infectionDelay;\n      delete this.infectionDelayStage;\n    }\n\n    if (this.infectionStage !== undefined && this.infectionTime !== undefined) {\n      const infectionStage = stages[this.infectionStage];\n\n      if (infectionStage.duration !== undefined && infectionStage.duration >= 0) {\n        if (this.infectionTime > infectionStage.duration * 1000) {\n          this.nextInfectionStage();\n        } else {\n          this.infectionTime += delta;\n        }\n      } else {\n        this.infectionTime += delta;\n      }\n    } else {\n      delete this.infectionStage;\n      delete this.infectionTime;\n    }\n  }\n\n  nextInfectionStage() {\n    const options = this.container.options;\n    const stagesCount = options.infection.stages.length;\n\n    if (stagesCount <= 0 || this.infectionStage === undefined) {\n      return;\n    }\n\n    this.infectionTime = 0;\n\n    if (stagesCount <= ++this.infectionStage) {\n      if (options.infection.cure) {\n        delete this.infectionStage;\n        delete this.infectionTime;\n        return;\n      } else {\n        this.infectionStage = 0;\n        this.infectionTime = 0;\n      }\n    }\n  }\n\n}\n\nexports.Infecter = Infecter;","map":{"version":3,"names":["Object","defineProperty","exports","value","Infecter","constructor","container","particle","startInfection","stage","options","stages","infection","stagesCount","length","infectionDelay","infectionDelayStage","updateInfectionStage","infectionStage","undefined","infectionTime","updateInfection","delta","delay","duration","nextInfectionStage","cure"],"sources":["/Users/isaicastro/Desktop/Projects/Face-Recognition/node_modules/tsparticles/dist/Core/Particle/Infecter.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Infecter = void 0;\nclass Infecter {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    startInfection(stage) {\n        const container = this.container;\n        const options = container.options;\n        const stages = options.infection.stages;\n        const stagesCount = stages.length;\n        if (stage > stagesCount || stage < 0) {\n            return;\n        }\n        this.infectionDelay = 0;\n        this.infectionDelayStage = stage;\n    }\n    updateInfectionStage(stage) {\n        const container = this.container;\n        const options = container.options;\n        const stagesCount = options.infection.stages.length;\n        if (stage > stagesCount || stage < 0 || (this.infectionStage !== undefined && this.infectionStage > stage)) {\n            return;\n        }\n        this.infectionStage = stage;\n        this.infectionTime = 0;\n    }\n    updateInfection(delta) {\n        const options = this.container.options;\n        const infection = options.infection;\n        const stages = options.infection.stages;\n        const stagesCount = stages.length;\n        if (this.infectionDelay !== undefined && this.infectionDelayStage !== undefined) {\n            const stage = this.infectionDelayStage;\n            if (stage > stagesCount || stage < 0) {\n                return;\n            }\n            if (this.infectionDelay > infection.delay * 1000) {\n                this.infectionStage = stage;\n                this.infectionTime = 0;\n                delete this.infectionDelay;\n                delete this.infectionDelayStage;\n            }\n            else {\n                this.infectionDelay += delta;\n            }\n        }\n        else {\n            delete this.infectionDelay;\n            delete this.infectionDelayStage;\n        }\n        if (this.infectionStage !== undefined && this.infectionTime !== undefined) {\n            const infectionStage = stages[this.infectionStage];\n            if (infectionStage.duration !== undefined && infectionStage.duration >= 0) {\n                if (this.infectionTime > infectionStage.duration * 1000) {\n                    this.nextInfectionStage();\n                }\n                else {\n                    this.infectionTime += delta;\n                }\n            }\n            else {\n                this.infectionTime += delta;\n            }\n        }\n        else {\n            delete this.infectionStage;\n            delete this.infectionTime;\n        }\n    }\n    nextInfectionStage() {\n        const options = this.container.options;\n        const stagesCount = options.infection.stages.length;\n        if (stagesCount <= 0 || this.infectionStage === undefined) {\n            return;\n        }\n        this.infectionTime = 0;\n        if (stagesCount <= ++this.infectionStage) {\n            if (options.infection.cure) {\n                delete this.infectionStage;\n                delete this.infectionTime;\n                return;\n            }\n            else {\n                this.infectionStage = 0;\n                this.infectionTime = 0;\n            }\n        }\n    }\n}\nexports.Infecter = Infecter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}