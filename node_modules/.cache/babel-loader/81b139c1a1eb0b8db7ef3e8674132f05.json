{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Emitters = void 0;\n\nconst EmitterInstance_1 = require(\"./EmitterInstance\");\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Emitter_1 = require(\"./Options/Classes/Emitter\");\n\nconst Enums_1 = require(\"./Enums\");\n\nclass Emitters {\n  constructor(container) {\n    this.container = container;\n    this.array = [];\n    this.emitters = [];\n    this.interactivityEmitters = [];\n  }\n\n  init(options) {\n    var _a, _b;\n\n    if (!options) {\n      return;\n    }\n\n    if (options.emitters) {\n      if (options.emitters instanceof Array) {\n        this.emitters = options.emitters.map(s => {\n          const tmp = new Emitter_1.Emitter();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        if (this.emitters instanceof Array) {\n          this.emitters = new Emitter_1.Emitter();\n        }\n\n        this.emitters.load(options.emitters);\n      }\n    }\n\n    const interactivityEmitters = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.emitters;\n\n    if (interactivityEmitters) {\n      if (interactivityEmitters instanceof Array) {\n        this.interactivityEmitters = interactivityEmitters.map(s => {\n          const tmp = new Emitter_1.Emitter();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        if (this.interactivityEmitters instanceof Array) {\n          this.interactivityEmitters = new Emitter_1.Emitter();\n        }\n\n        this.interactivityEmitters.load(interactivityEmitters);\n      }\n    }\n\n    if (this.emitters instanceof Array) {\n      for (const emitterOptions of this.emitters) {\n        const emitter = new EmitterInstance_1.EmitterInstance(this, this.container, emitterOptions);\n        this.addEmitter(emitter);\n      }\n    } else {\n      const emitterOptions = this.emitters;\n      const emitter = new EmitterInstance_1.EmitterInstance(this, this.container, emitterOptions);\n      this.addEmitter(emitter);\n    }\n  }\n\n  play() {\n    for (const emitter of this.array) {\n      emitter.play();\n    }\n  }\n\n  pause() {\n    for (const emitter of this.array) {\n      emitter.pause();\n    }\n  }\n\n  stop() {\n    this.array = [];\n  }\n\n  handleClickMode(mode) {\n    const container = this.container;\n    const emitterOptions = this.emitters;\n    const modeEmitters = this.interactivityEmitters;\n\n    if (mode === Enums_1.EmitterClickMode.emitter) {\n      let emitterModeOptions;\n\n      if (modeEmitters instanceof Array) {\n        if (modeEmitters.length > 0) {\n          emitterModeOptions = Utils_1.Utils.itemFromArray(modeEmitters);\n        }\n      } else {\n        emitterModeOptions = modeEmitters;\n      }\n\n      const emittersOptions = emitterModeOptions !== null && emitterModeOptions !== void 0 ? emitterModeOptions : emitterOptions instanceof Array ? Utils_1.Utils.itemFromArray(emitterOptions) : emitterOptions;\n      const ePosition = container.interactivity.mouse.clickPosition;\n      const emitter = new EmitterInstance_1.EmitterInstance(this, this.container, Utils_1.Utils.deepExtend({}, emittersOptions), ePosition);\n      this.addEmitter(emitter);\n    }\n  }\n\n  resize() {\n    for (const emitter of this.array) {\n      emitter.resize();\n    }\n  }\n\n  addEmitter(emitter) {\n    this.array.push(emitter);\n  }\n\n  removeEmitter(emitter) {\n    const index = this.array.indexOf(emitter);\n\n    if (index >= 0) {\n      this.array.splice(index, 1);\n    }\n  }\n\n}\n\nexports.Emitters = Emitters;","map":{"version":3,"names":["Object","defineProperty","exports","value","Emitters","EmitterInstance_1","require","Utils_1","Emitter_1","Enums_1","constructor","container","array","emitters","interactivityEmitters","init","options","_a","_b","Array","map","s","tmp","Emitter","load","interactivity","modes","emitterOptions","emitter","EmitterInstance","addEmitter","play","pause","stop","handleClickMode","mode","modeEmitters","EmitterClickMode","emitterModeOptions","length","Utils","itemFromArray","emittersOptions","ePosition","mouse","clickPosition","deepExtend","resize","push","removeEmitter","index","indexOf","splice"],"sources":["/Users/isaicastro/Desktop/Projects/Face-Recognition/node_modules/tsparticles/dist/Plugins/Emitters/Emitters.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Emitters = void 0;\nconst EmitterInstance_1 = require(\"./EmitterInstance\");\nconst Utils_1 = require(\"../../Utils\");\nconst Emitter_1 = require(\"./Options/Classes/Emitter\");\nconst Enums_1 = require(\"./Enums\");\nclass Emitters {\n    constructor(container) {\n        this.container = container;\n        this.array = [];\n        this.emitters = [];\n        this.interactivityEmitters = [];\n    }\n    init(options) {\n        var _a, _b;\n        if (!options) {\n            return;\n        }\n        if (options.emitters) {\n            if (options.emitters instanceof Array) {\n                this.emitters = options.emitters.map((s) => {\n                    const tmp = new Emitter_1.Emitter();\n                    tmp.load(s);\n                    return tmp;\n                });\n            }\n            else {\n                if (this.emitters instanceof Array) {\n                    this.emitters = new Emitter_1.Emitter();\n                }\n                this.emitters.load(options.emitters);\n            }\n        }\n        const interactivityEmitters = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.emitters;\n        if (interactivityEmitters) {\n            if (interactivityEmitters instanceof Array) {\n                this.interactivityEmitters = interactivityEmitters.map((s) => {\n                    const tmp = new Emitter_1.Emitter();\n                    tmp.load(s);\n                    return tmp;\n                });\n            }\n            else {\n                if (this.interactivityEmitters instanceof Array) {\n                    this.interactivityEmitters = new Emitter_1.Emitter();\n                }\n                this.interactivityEmitters.load(interactivityEmitters);\n            }\n        }\n        if (this.emitters instanceof Array) {\n            for (const emitterOptions of this.emitters) {\n                const emitter = new EmitterInstance_1.EmitterInstance(this, this.container, emitterOptions);\n                this.addEmitter(emitter);\n            }\n        }\n        else {\n            const emitterOptions = this.emitters;\n            const emitter = new EmitterInstance_1.EmitterInstance(this, this.container, emitterOptions);\n            this.addEmitter(emitter);\n        }\n    }\n    play() {\n        for (const emitter of this.array) {\n            emitter.play();\n        }\n    }\n    pause() {\n        for (const emitter of this.array) {\n            emitter.pause();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    handleClickMode(mode) {\n        const container = this.container;\n        const emitterOptions = this.emitters;\n        const modeEmitters = this.interactivityEmitters;\n        if (mode === Enums_1.EmitterClickMode.emitter) {\n            let emitterModeOptions;\n            if (modeEmitters instanceof Array) {\n                if (modeEmitters.length > 0) {\n                    emitterModeOptions = Utils_1.Utils.itemFromArray(modeEmitters);\n                }\n            }\n            else {\n                emitterModeOptions = modeEmitters;\n            }\n            const emittersOptions = emitterModeOptions !== null && emitterModeOptions !== void 0 ? emitterModeOptions : (emitterOptions instanceof Array ? Utils_1.Utils.itemFromArray(emitterOptions) : emitterOptions);\n            const ePosition = container.interactivity.mouse.clickPosition;\n            const emitter = new EmitterInstance_1.EmitterInstance(this, this.container, Utils_1.Utils.deepExtend({}, emittersOptions), ePosition);\n            this.addEmitter(emitter);\n        }\n    }\n    resize() {\n        for (const emitter of this.array) {\n            emitter.resize();\n        }\n    }\n    addEmitter(emitter) {\n        this.array.push(emitter);\n    }\n    removeEmitter(emitter) {\n        const index = this.array.indexOf(emitter);\n        if (index >= 0) {\n            this.array.splice(index, 1);\n        }\n    }\n}\nexports.Emitters = Emitters;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,QAAR,GAAmB,KAAK,CAAxB;;AACA,MAAMC,iBAAiB,GAAGC,OAAO,CAAC,mBAAD,CAAjC;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,2BAAD,CAAzB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMF,QAAN,CAAe;EACXM,WAAW,CAACC,SAAD,EAAY;IACnB,KAAKA,SAAL,GAAiBA,SAAjB;IACA,KAAKC,KAAL,GAAa,EAAb;IACA,KAAKC,QAAL,GAAgB,EAAhB;IACA,KAAKC,qBAAL,GAA6B,EAA7B;EACH;;EACDC,IAAI,CAACC,OAAD,EAAU;IACV,IAAIC,EAAJ,EAAQC,EAAR;;IACA,IAAI,CAACF,OAAL,EAAc;MACV;IACH;;IACD,IAAIA,OAAO,CAACH,QAAZ,EAAsB;MAClB,IAAIG,OAAO,CAACH,QAAR,YAA4BM,KAAhC,EAAuC;QACnC,KAAKN,QAAL,GAAgBG,OAAO,CAACH,QAAR,CAAiBO,GAAjB,CAAsBC,CAAD,IAAO;UACxC,MAAMC,GAAG,GAAG,IAAId,SAAS,CAACe,OAAd,EAAZ;UACAD,GAAG,CAACE,IAAJ,CAASH,CAAT;UACA,OAAOC,GAAP;QACH,CAJe,CAAhB;MAKH,CAND,MAOK;QACD,IAAI,KAAKT,QAAL,YAAyBM,KAA7B,EAAoC;UAChC,KAAKN,QAAL,GAAgB,IAAIL,SAAS,CAACe,OAAd,EAAhB;QACH;;QACD,KAAKV,QAAL,CAAcW,IAAd,CAAmBR,OAAO,CAACH,QAA3B;MACH;IACJ;;IACD,MAAMC,qBAAqB,GAAG,CAACI,EAAE,GAAG,CAACD,EAAE,GAAGD,OAAO,CAACS,aAAd,MAAiC,IAAjC,IAAyCR,EAAE,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,EAAE,CAACS,KAA3E,MAAsF,IAAtF,IAA8FR,EAAE,KAAK,KAAK,CAA1G,GAA8G,KAAK,CAAnH,GAAuHA,EAAE,CAACL,QAAxJ;;IACA,IAAIC,qBAAJ,EAA2B;MACvB,IAAIA,qBAAqB,YAAYK,KAArC,EAA4C;QACxC,KAAKL,qBAAL,GAA6BA,qBAAqB,CAACM,GAAtB,CAA2BC,CAAD,IAAO;UAC1D,MAAMC,GAAG,GAAG,IAAId,SAAS,CAACe,OAAd,EAAZ;UACAD,GAAG,CAACE,IAAJ,CAASH,CAAT;UACA,OAAOC,GAAP;QACH,CAJ4B,CAA7B;MAKH,CAND,MAOK;QACD,IAAI,KAAKR,qBAAL,YAAsCK,KAA1C,EAAiD;UAC7C,KAAKL,qBAAL,GAA6B,IAAIN,SAAS,CAACe,OAAd,EAA7B;QACH;;QACD,KAAKT,qBAAL,CAA2BU,IAA3B,CAAgCV,qBAAhC;MACH;IACJ;;IACD,IAAI,KAAKD,QAAL,YAAyBM,KAA7B,EAAoC;MAChC,KAAK,MAAMQ,cAAX,IAA6B,KAAKd,QAAlC,EAA4C;QACxC,MAAMe,OAAO,GAAG,IAAIvB,iBAAiB,CAACwB,eAAtB,CAAsC,IAAtC,EAA4C,KAAKlB,SAAjD,EAA4DgB,cAA5D,CAAhB;QACA,KAAKG,UAAL,CAAgBF,OAAhB;MACH;IACJ,CALD,MAMK;MACD,MAAMD,cAAc,GAAG,KAAKd,QAA5B;MACA,MAAMe,OAAO,GAAG,IAAIvB,iBAAiB,CAACwB,eAAtB,CAAsC,IAAtC,EAA4C,KAAKlB,SAAjD,EAA4DgB,cAA5D,CAAhB;MACA,KAAKG,UAAL,CAAgBF,OAAhB;IACH;EACJ;;EACDG,IAAI,GAAG;IACH,KAAK,MAAMH,OAAX,IAAsB,KAAKhB,KAA3B,EAAkC;MAC9BgB,OAAO,CAACG,IAAR;IACH;EACJ;;EACDC,KAAK,GAAG;IACJ,KAAK,MAAMJ,OAAX,IAAsB,KAAKhB,KAA3B,EAAkC;MAC9BgB,OAAO,CAACI,KAAR;IACH;EACJ;;EACDC,IAAI,GAAG;IACH,KAAKrB,KAAL,GAAa,EAAb;EACH;;EACDsB,eAAe,CAACC,IAAD,EAAO;IAClB,MAAMxB,SAAS,GAAG,KAAKA,SAAvB;IACA,MAAMgB,cAAc,GAAG,KAAKd,QAA5B;IACA,MAAMuB,YAAY,GAAG,KAAKtB,qBAA1B;;IACA,IAAIqB,IAAI,KAAK1B,OAAO,CAAC4B,gBAAR,CAAyBT,OAAtC,EAA+C;MAC3C,IAAIU,kBAAJ;;MACA,IAAIF,YAAY,YAAYjB,KAA5B,EAAmC;QAC/B,IAAIiB,YAAY,CAACG,MAAb,GAAsB,CAA1B,EAA6B;UACzBD,kBAAkB,GAAG/B,OAAO,CAACiC,KAAR,CAAcC,aAAd,CAA4BL,YAA5B,CAArB;QACH;MACJ,CAJD,MAKK;QACDE,kBAAkB,GAAGF,YAArB;MACH;;MACD,MAAMM,eAAe,GAAGJ,kBAAkB,KAAK,IAAvB,IAA+BA,kBAAkB,KAAK,KAAK,CAA3D,GAA+DA,kBAA/D,GAAqFX,cAAc,YAAYR,KAA1B,GAAkCZ,OAAO,CAACiC,KAAR,CAAcC,aAAd,CAA4Bd,cAA5B,CAAlC,GAAgFA,cAA7L;MACA,MAAMgB,SAAS,GAAGhC,SAAS,CAACc,aAAV,CAAwBmB,KAAxB,CAA8BC,aAAhD;MACA,MAAMjB,OAAO,GAAG,IAAIvB,iBAAiB,CAACwB,eAAtB,CAAsC,IAAtC,EAA4C,KAAKlB,SAAjD,EAA4DJ,OAAO,CAACiC,KAAR,CAAcM,UAAd,CAAyB,EAAzB,EAA6BJ,eAA7B,CAA5D,EAA2GC,SAA3G,CAAhB;MACA,KAAKb,UAAL,CAAgBF,OAAhB;IACH;EACJ;;EACDmB,MAAM,GAAG;IACL,KAAK,MAAMnB,OAAX,IAAsB,KAAKhB,KAA3B,EAAkC;MAC9BgB,OAAO,CAACmB,MAAR;IACH;EACJ;;EACDjB,UAAU,CAACF,OAAD,EAAU;IAChB,KAAKhB,KAAL,CAAWoC,IAAX,CAAgBpB,OAAhB;EACH;;EACDqB,aAAa,CAACrB,OAAD,EAAU;IACnB,MAAMsB,KAAK,GAAG,KAAKtC,KAAL,CAAWuC,OAAX,CAAmBvB,OAAnB,CAAd;;IACA,IAAIsB,KAAK,IAAI,CAAb,EAAgB;MACZ,KAAKtC,KAAL,CAAWwC,MAAX,CAAkBF,KAAlB,EAAyB,CAAzB;IACH;EACJ;;AArGU;;AAuGfhD,OAAO,CAACE,QAAR,GAAmBA,QAAnB"},"metadata":{},"sourceType":"script"}