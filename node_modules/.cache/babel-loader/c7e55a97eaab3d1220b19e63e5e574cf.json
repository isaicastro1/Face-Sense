{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particles = void 0;\n\nconst Particle_1 = require(\"./Particle\");\n\nconst Utils_1 = require(\"../Utils\");\n\nconst InteractionManager_1 = require(\"./Particle/InteractionManager\");\n\nclass Particles {\n  constructor(container) {\n    this.container = container;\n    this.array = [];\n    this.interactionManager = new InteractionManager_1.InteractionManager(container);\n    const canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(0, 0, canvasSize.width, canvasSize.height), 4);\n  }\n\n  get count() {\n    return this.array.length;\n  }\n\n  init() {\n    const container = this.container;\n    const options = container.options;\n    let handled = false;\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    if (!handled) {\n      for (let i = this.count; i < options.particles.number.value; i++) {\n        this.addParticle();\n      }\n    }\n\n    if (options.infection.enable) {\n      for (let i = 0; i < options.infection.infections; i++) {\n        const notInfected = this.array.map(p => p.infecter).filter(p => p.infectionStage === undefined);\n        const infected = Utils_1.Utils.itemFromArray(notInfected);\n        infected.startInfection(0);\n      }\n    }\n\n    this.interactionManager.init();\n    container.noise.init();\n  }\n\n  redraw() {\n    this.clear();\n    this.init();\n    this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n\n  removeAt(index, quantity) {\n    if (index >= 0 && index <= this.count) {\n      for (const particle of this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1)) {\n        particle.destroy();\n      }\n    }\n  }\n\n  remove(particle) {\n    this.removeAt(this.array.indexOf(particle));\n  }\n\n  update(delta) {\n    const container = this.container;\n    const particlesToDelete = [];\n    container.noise.update();\n\n    for (const particle of this.array) {\n      particle.move(delta);\n\n      if (particle.destroyed) {\n        particlesToDelete.push(particle);\n        continue;\n      }\n\n      this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n    }\n\n    for (const particle of particlesToDelete) {\n      this.remove(particle);\n    }\n\n    this.interactionManager.externalInteract(delta);\n\n    for (const particle of this.container.particles.array) {\n      particle.update(delta);\n      this.interactionManager.particlesInteract(particle, delta);\n    }\n  }\n\n  draw(delta) {\n    const container = this.container;\n    container.canvas.clear();\n    const canvasSize = this.container.canvas.size;\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(0, 0, canvasSize.width, canvasSize.height), 4);\n    this.update(delta);\n\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawPlugin(plugin, delta);\n    }\n\n    for (const p of this.array) {\n      p.draw(delta);\n    }\n  }\n\n  clear() {\n    this.array = [];\n  }\n\n  push(nb, mouse, overrideOptions) {\n    const container = this.container;\n    const options = container.options;\n    const limit = options.particles.number.limit * container.density;\n    this.pushing = true;\n\n    if (limit > 0) {\n      const countToRemove = this.count + nb - limit;\n\n      if (countToRemove > 0) {\n        this.removeQuantity(countToRemove);\n      }\n    }\n\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions);\n    }\n\n    if (!options.particles.move.enable) {\n      this.container.play();\n    }\n\n    this.pushing = false;\n  }\n\n  addParticle(position, overrideOptions) {\n    try {\n      const particle = new Particle_1.Particle(this.container, position, overrideOptions);\n      this.array.push(particle);\n      return particle;\n    } catch (_a) {\n      console.log(\"error adding particle\");\n      return;\n    }\n  }\n\n  removeQuantity(quantity) {\n    const options = this.container.options;\n    this.removeAt(0, quantity);\n\n    if (!options.particles.move.enable) {\n      this.container.play();\n    }\n  }\n\n}\n\nexports.Particles = Particles;","map":{"version":3,"names":["Object","defineProperty","exports","value","Particles","Particle_1","require","Utils_1","InteractionManager_1","constructor","container","array","interactionManager","InteractionManager","canvasSize","canvas","size","linksColors","Map","quadTree","QuadTree","Rectangle","width","height","count","length","init","options","handled","plugin","plugins","particlesInitialization","undefined","i","particles","number","addParticle","infection","enable","infections","notInfected","map","p","infecter","filter","infectionStage","infected","Utils","itemFromArray","startInfection","noise","redraw","clear","draw","factor","removeAt","index","quantity","particle","splice","destroy","remove","indexOf","update","delta","particlesToDelete","move","destroyed","push","insert","Point","getPosition","externalInteract","particlesInteract","drawPlugin","nb","mouse","overrideOptions","limit","density","pushing","countToRemove","removeQuantity","position","play","Particle","_a","console","log"],"sources":["/Users/isaicastro/Desktop/Projects/Face-Recognition/node_modules/tsparticles/dist/Core/Particles.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particles = void 0;\nconst Particle_1 = require(\"./Particle\");\nconst Utils_1 = require(\"../Utils\");\nconst InteractionManager_1 = require(\"./Particle/InteractionManager\");\nclass Particles {\n    constructor(container) {\n        this.container = container;\n        this.array = [];\n        this.interactionManager = new InteractionManager_1.InteractionManager(container);\n        const canvasSize = this.container.canvas.size;\n        this.linksColors = new Map();\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(0, 0, canvasSize.width, canvasSize.height), 4);\n    }\n    get count() {\n        return this.array.length;\n    }\n    init() {\n        const container = this.container;\n        const options = container.options;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (!handled) {\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n        if (options.infection.enable) {\n            for (let i = 0; i < options.infection.infections; i++) {\n                const notInfected = this.array.map((p) => p.infecter).filter((p) => p.infectionStage === undefined);\n                const infected = Utils_1.Utils.itemFromArray(notInfected);\n                infected.startInfection(0);\n            }\n        }\n        this.interactionManager.init();\n        container.noise.init();\n    }\n    redraw() {\n        this.clear();\n        this.init();\n        this.draw({ value: 0, factor: 0 });\n    }\n    removeAt(index, quantity) {\n        if (index >= 0 && index <= this.count) {\n            for (const particle of this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1)) {\n                particle.destroy();\n            }\n        }\n    }\n    remove(particle) {\n        this.removeAt(this.array.indexOf(particle));\n    }\n    update(delta) {\n        const container = this.container;\n        const particlesToDelete = [];\n        container.noise.update();\n        for (const particle of this.array) {\n            particle.move(delta);\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        this.interactionManager.externalInteract(delta);\n        for (const particle of this.container.particles.array) {\n            particle.update(delta);\n            this.interactionManager.particlesInteract(particle, delta);\n        }\n    }\n    draw(delta) {\n        const container = this.container;\n        container.canvas.clear();\n        const canvasSize = this.container.canvas.size;\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(0, 0, canvasSize.width, canvasSize.height), 4);\n        this.update(delta);\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.array) {\n            p.draw(delta);\n        }\n    }\n    clear() {\n        this.array = [];\n    }\n    push(nb, mouse, overrideOptions) {\n        const container = this.container;\n        const options = container.options;\n        const limit = options.particles.number.limit * container.density;\n        this.pushing = true;\n        if (limit > 0) {\n            const countToRemove = this.count + nb - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions);\n        }\n        if (!options.particles.move.enable) {\n            this.container.play();\n        }\n        this.pushing = false;\n    }\n    addParticle(position, overrideOptions) {\n        try {\n            const particle = new Particle_1.Particle(this.container, position, overrideOptions);\n            this.array.push(particle);\n            return particle;\n        }\n        catch (_a) {\n            console.log(\"error adding particle\");\n            return;\n        }\n    }\n    removeQuantity(quantity) {\n        const options = this.container.options;\n        this.removeAt(0, quantity);\n        if (!options.particles.move.enable) {\n            this.container.play();\n        }\n    }\n}\nexports.Particles = Particles;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}